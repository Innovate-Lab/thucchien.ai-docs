"use strict";(self.webpackChunklitellm_user_guide=self.webpackChunklitellm_user_guide||[]).push([[724],{238:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>u,default:()=>m,frontMatter:()=>c,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"user-guide/video-generation-veo3","title":"Sinh video v\u1edbi Veo 3 (Quy tr\xecnh b\u1ea5t \u0111\u1ed3ng b\u1ed9)","description":"Vi\u1ec7c t\u1ea1o video l\xe0 m\u1ed9t t\xe1c v\u1ee5 t\u1ed1n nhi\u1ec1u t\xe0i nguy\xean v\xe0 th\u1eddi gian. Do \u0111\xf3, t\u01b0\u01a1ng t\xe1c v\u1edbi m\xf4 h\xecnh veo 3 kh\xf4ng di\u1ec5n ra ngay l\u1eadp t\u1ee9c m\xe0 theo m\u1ed9t quy tr\xecnh b\u1ea5t \u0111\u1ed3ng b\u1ed9 (asynchronous) g\u1ed3m 3 b\u01b0\u1edbc.","source":"@site/docs/user-guide/video-generation-veo3.mdx","sourceDirName":"user-guide","slug":"/user-guide/video-generation-veo3","permalink":"/docs/user-guide/video-generation-veo3","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/user-guide/video-generation-veo3.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Sinh h\xecnh \u1ea3nh (Image Generation)","permalink":"/docs/user-guide/image-generation"},"next":{"title":"Chuy\u1ec3n v\u0103n b\u1ea3n th\xe0nh gi\u1ecdng n\xf3i (Text-to-Speech)","permalink":"/docs/user-guide/text-to-speech"}}');var o=t(4848),r=t(8453),a=t(1470),s=t(9365),l=t(1028);const d=t.p+"assets/medias/my_generated_video-c2788e4c6b024658d56354532d8fff2f.mp4",c={sidebar_position:5},u="Sinh video v\u1edbi Veo 3 (Quy tr\xecnh b\u1ea5t \u0111\u1ed3ng b\u1ed9)",p={},h=[{value:"T\u1ed5ng quan quy tr\xecnh",id:"t\u1ed5ng-quan-quy-tr\xecnh",level:2},{value:"H\u01b0\u1edbng d\u1eabn chi ti\u1ebft",id:"h\u01b0\u1edbng-d\u1eabn-chi-ti\u1ebft",level:2},{value:"C\xe1c tham s\u1ed1 t\xf9y ch\u1ecdn",id:"c\xe1c-tham-s\u1ed1-t\xf9y-ch\u1ecdn",level:2}];function g(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"sinh-video-v\u1edbi-veo-3-quy-tr\xecnh-b\u1ea5t-\u0111\u1ed3ng-b\u1ed9",children:"Sinh video v\u1edbi Veo 3 (Quy tr\xecnh b\u1ea5t \u0111\u1ed3ng b\u1ed9)"})}),"\n","\n",(0,o.jsxs)(n.p,{children:["Vi\u1ec7c t\u1ea1o video l\xe0 m\u1ed9t t\xe1c v\u1ee5 t\u1ed1n nhi\u1ec1u t\xe0i nguy\xean v\xe0 th\u1eddi gian. Do \u0111\xf3, t\u01b0\u01a1ng t\xe1c v\u1edbi m\xf4 h\xecnh ",(0,o.jsx)(n.code,{children:"veo 3"})," kh\xf4ng di\u1ec5n ra ngay l\u1eadp t\u1ee9c m\xe0 theo m\u1ed9t quy tr\xecnh b\u1ea5t \u0111\u1ed3ng b\u1ed9 (asynchronous) g\u1ed3m 3 b\u01b0\u1edbc."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Model \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3:"})," ",(0,o.jsx)(n.code,{children:"veo 3"})," (Google Vertex AI)"]}),"\n",(0,o.jsx)(n.h2,{id:"t\u1ed5ng-quan-quy-tr\xecnh",children:"T\u1ed5ng quan quy tr\xecnh"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"B\u1eaft \u0111\u1ea7u t\xe1c v\u1ee5:"})," B\u1ea1n g\u1eedi m\u1ed9t y\xeau c\u1ea7u ch\u1ee9a m\xf4 t\u1ea3 (prompt) \u0111\u1ec3 b\u1eaft \u0111\u1ea7u qu\xe1 tr\xecnh t\u1ea1o video. API s\u1ebd tr\u1ea3 v\u1ec1 m\u1ed9t ",(0,o.jsx)(n.code,{children:"operation_name"})," \u0111\u1ec3 b\u1ea1n theo d\xf5i."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Ki\u1ec3m tra tr\u1ea1ng th\xe1i:"})," B\u1ea1n s\u1eed d\u1ee5ng ",(0,o.jsx)(n.code,{children:"operation_name"})," \u0111\u1ec3 h\u1ecfi API xem video \u0111\xe3 \u0111\u01b0\u1ee3c t\u1ea1o xong ch\u01b0a. B\u1ea1n c\u1ea7n l\u1eb7p l\u1ea1i b\u01b0\u1edbc n\xe0y cho \u0111\u1ebfn khi nh\u1eadn \u0111\u01b0\u1ee3c tr\u1ea1ng th\xe1i ho\xe0n t\u1ea5t."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"T\u1ea3i video:"})," Khi video \u0111\xe3 s\u1eb5n s\xe0ng, k\u1ebft qu\u1ea3 ki\u1ec3m tra tr\u1ea1ng th\xe1i s\u1ebd ch\u1ee9a m\u1ed9t URI (\u0111\u01b0\u1eddng d\u1eabn) \u0111\u1ebfn file video. B\u1ea1n s\u1eed d\u1ee5ng URI n\xe0y \u0111\u1ec3 t\u1ea3i video v\u1ec1."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"h\u01b0\u1edbng-d\u1eabn-chi-ti\u1ebft",children:"H\u01b0\u1edbng d\u1eabn chi ti\u1ebft"}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsxs)(s.A,{value:"curl",label:"curl (T\u1eebng b\u01b0\u1edbc)",children:[(0,o.jsx)("h4",{children:"B\u01b0\u1edbc 1: B\u1eaft \u0111\u1ea7u t\u1ea1o video"}),(0,o.jsx)("p",{children:"G\u1eedi m\u1ed9t y\xeau c\u1ea7u POST \u0111\u1ebfn endpoint \u0111\u1eb7c bi\u1ec7t d\xe0nh cho Veo."}),(0,o.jsx)(n.admonition,{title:"Quan tr\u1ecdng",type:"info",children:(0,o.jsxs)(n.p,{children:["Do m\xe1y ch\u1ee7 proxy \u0111ang s\u1eed d\u1ee5ng c\u01a1 ch\u1ebf pass-through t\u1edbi Google AI Studio, b\u1ea1n s\u1ebd s\u1eed d\u1ee5ng header ",(0,o.jsx)(n.code,{children:"x-goog-api-key"})," thay cho header ",(0,o.jsx)(n.code,{children:"Authorization"})," ti\xeau chu\u1ea9n."]})}),(0,o.jsx)(l.A,{language:"bash",children:'curl -X POST https://api.thucchien.ai/gemini/v1beta/models/veo-3.0-generate-preview:predictLongRunning \\\n-H "Content-Type: application/json" \\\n-H "x-goog-api-key: <your_api_key>" \\\n-d \'{\n  "instances": [{\n    "prompt": "A cinematic shot of a hummingbird flying in slow motion"\n  }]\n}\''}),(0,o.jsxs)("p",{children:["N\u1ebfu th\xe0nh c\xf4ng, API s\u1ebd tr\u1ea3 v\u1ec1 m\u1ed9t JSON ch\u1ee9a ",(0,o.jsx)("code",{children:"name"})," c\u1ee7a t\xe1c v\u1ee5. H\xe3y l\u01b0u l\u1ea1i gi\xe1 tr\u1ecb n\xe0y."]}),(0,o.jsx)(l.A,{language:"json",children:'{\n"name": "models/veo-3.0-generate-preview/operations/idrk08ltkg0a"\n}'}),(0,o.jsxs)("p",{children:[(0,o.jsx)(n.p,{children:"Trong \u0111\xf3:"}),(0,o.jsxs)("ul",{children:[(0,o.jsxs)("li",{children:[(0,o.jsx)("b",{children:(0,o.jsx)("code",{children:"operation_name"})}),": l\xe0 to\xe0n b\u1ed9 chu\u1ed7i ",(0,o.jsx)("code",{children:"models/veo-3.0-generate-preview/operations/idrk08ltkg0a"}),"."]}),(0,o.jsxs)("li",{children:[(0,o.jsx)("b",{children:(0,o.jsx)("code",{children:"operation_id"})}),": l\xe0 ph\u1ea7n \u0111\u1ecbnh danh duy nh\u1ea5t c\u1ee7a t\xe1c v\u1ee5, trong v\xed d\u1ee5 n\xe0y l\xe0 ",(0,o.jsx)("code",{children:"idrk08ltkg0a"}),". B\u1ea1n s\u1ebd s\u1eed d\u1ee5ng ID n\xe0y \u1edf b\u01b0\u1edbc ti\u1ebfp theo."]})]})]}),(0,o.jsx)("h4",{children:"B\u01b0\u1edbc 2: Ki\u1ec3m tra tr\u1ea1ng th\xe1i"}),(0,o.jsxs)("p",{children:["S\u1eed d\u1ee5ng ",(0,o.jsx)("code",{children:"operation_id"})," (v\xed d\u1ee5: ",(0,o.jsx)("code",{children:"idrk08ltkg0a"}),") b\u1ea1n nh\u1eadn \u0111\u01b0\u1ee3c \u1edf B\u01b0\u1edbc 1 \u0111\u1ec3 x\xe2y d\u1ef1ng URL v\xe0 g\u1eedi y\xeau c\u1ea7u GET \u0111\u1ec3 ki\u1ec3m tra tr\u1ea1ng th\xe1i."]}),(0,o.jsx)(l.A,{language:"bash",children:'# URL ki\u1ec3m tra tr\u1ea1ng th\xe1i: https://api.thucchien.ai/gemini/v1beta/models/veo-3.0-generate-preview/operations/idrk08ltkg0a\ncurl https://api.thucchien.ai/gemini/v1beta/models/veo-3.0-generate-preview/operations/<operation_id> \\\n-H "x-goog-api-key: <your_api_key>"'}),(0,o.jsxs)("p",{children:["L\u1eb7p l\u1ea1i y\xeau c\u1ea7u n\xe0y cho \u0111\u1ebfn khi response ch\u1ee9a ",(0,o.jsx)("code",{children:'"done": true'}),"."]}),(0,o.jsx)(l.A,{language:"json",children:'{\n  "name": "models/veo-3.0-generate-preview/operations/idrk08ltkg0a",\n  "done": true,\n  "response": {\n      "@type": "type.googleapis.com/google.ai.generativelanguage.v1beta.PredictLongRunningResponse",\n      "generateVideoResponse": {\n          "generatedSamples": [\n              {\n                  "video": {\n                      "uri": "https://generativelanguage.googleapis.com/v1beta/files/3j6svp4106e7:download?alt=media"\n                  }\n              }\n          ]\n      }\n  }\n}'}),(0,o.jsxs)("p",{children:["Khi t\xe1c v\u1ee5 ho\xe0n t\u1ea5t (",(0,o.jsx)("code",{children:'"done": true'}),"), response s\u1ebd ch\u1ee9a m\u1ed9t tr\u01b0\u1eddng ",(0,o.jsx)("code",{children:"uri"}),". T\u1eeb URI n\xe0y, ch\xfang ta c\xf3 th\u1ec3 tr\xedch xu\u1ea5t ra ",(0,o.jsx)("b",{children:(0,o.jsx)("code",{children:"video_id"})}),", trong tr\u01b0\u1eddng h\u1ee3p n\xe0y l\xe0 ",(0,o.jsx)("code",{children:"3j6svp4106e7"}),". ID n\xe0y \u0111\u01b0\u1ee3c d\xf9ng \u0111\u1ec3 t\u1ea3i video \u1edf b\u01b0\u1edbc cu\u1ed1i c\xf9ng."]}),(0,o.jsx)("h4",{children:"B\u01b0\u1edbc 3: T\u1ea3i video"}),(0,o.jsxs)("p",{children:["S\u1eed d\u1ee5ng ",(0,o.jsx)("code",{children:"video_id"})," (v\xed d\u1ee5: ",(0,o.jsx)("code",{children:"3j6svp4106e7"}),") \u0111\xe3 tr\xedch xu\u1ea5t \u1edf B\u01b0\u1edbc 2 \u0111\u1ec3 t\u1ea1o URL t\u1ea3i xu\u1ed1ng cu\u1ed1i c\xf9ng th\xf4ng qua proxy."]}),(0,o.jsx)(l.A,{language:"bash",children:'# URI g\u1ed1c t\u1eeb Google: https://generativelanguage.googleapis.com/v1beta/files/3j6svp4106e7:download?alt=media\n# \u0110\u01b0\u1eddng d\u1eabn t\u01b0\u01a1ng \u0111\u1ed1i c\u1ea7n d\xf9ng: v1beta/files/3j6svp4106e7:download?alt=media\n# URL t\u1ea3i xu\u1ed1ng qua proxy: https://api.thucchien.ai/gemini/download/v1beta/files/3j6svp4106e7:download?alt=media\n\ncurl https://api.thucchien.ai/gemini/download/v1beta/files/<video_id>:download?alt=media \\\n-H "x-goog-api-key: <your_api_key>" \\\n--output my_generated_video.mp4'}),(0,o.jsx)("p",{children:"K\u1ebft qu\u1ea3 b\u1ea1n s\u1ebd c\xf3 file video nh\u01b0 sau:"}),(0,o.jsx)("video",{controls:!0,style:{maxWidth:"100%"},src:d,children:(0,o.jsx)(n.p,{children:"Your browser does not support the video tag."})})]}),(0,o.jsxs)(s.A,{value:"python",label:"Python (Script t\u1ef1 \u0111\u1ed9ng)",children:[(0,o.jsx)("p",{children:"D\u01b0\u1edbi \u0111\xe2y l\xe0 m\u1ed9t k\u1ecbch b\u1ea3n Python ho\xe0n ch\u1ec9nh \u0111\u1ec3 t\u1ef1 \u0111\u1ed9ng h\xf3a c\u1ea3 3 b\u01b0\u1edbc."}),(0,o.jsx)(n.admonition,{title:"Quan tr\u1ecdng",type:"info",children:(0,o.jsxs)(n.p,{children:["T\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\xed d\u1ee5 v\u1edbi ",(0,o.jsx)(n.code,{children:"curl"}),", k\u1ecbch b\u1ea3n Python n\xe0y c\u0169ng s\u1eed d\u1ee5ng header ",(0,o.jsx)(n.code,{children:"x-goog-api-key"})," do c\u01a1 ch\u1ebf pass-through c\u1ee7a m\xe1y ch\u1ee7 proxy."]})}),(0,o.jsx)(l.A,{language:"python",children:'#!/usr/bin/env python3\n"""\nComplete example for Veo video generation through LiteLLM proxy.\n\nThis script demonstrates how to:\n1. Generate videos using Google\'s Veo model\n2. Poll for completion status\n3. Download the generated video file\n\nRequirements:\n- LiteLLM proxy running with Google AI Studio pass-through configured\n- Google AI Studio API key with Veo access\n\n# This file is forked and adapted from: https://github.com/BerriAI/litellm/blob/main/docs/my-website/docs/proxy/veo_video_generation.md .Please refer to the original for license details.\n"""\n\nimport json\nimport os\nimport time\nimport requests\nfrom typing import Optional\n\n\nclass VeoVideoGenerator:\n  """Complete Veo video generation client using LiteLLM proxy."""\n  \n  def __init__(self, base_url: str = "https://api.thucchien.ai/gemini/v1beta", \n               api_key: str = "sk-1234"):\n      """\n      Initialize the Veo video generator.\n      \n      Args:\n          base_url: Base URL for the LiteLLM proxy with Gemini pass-through\n          api_key: API key for LiteLLM proxy authentication\n      """\n      self.base_url = base_url\n      self.api_key = api_key\n      self.headers = {\n          "x-goog-api-key": api_key,\n          "Content-Type": "application/json"\n      }\n  \n  def generate_video(self, prompt: str) -> Optional[str]:\n      """\n      Initiate video generation with Veo.\n      \n      Args:\n          prompt: Text description of the video to generate\n          \n      Returns:\n          Operation name if successful, None otherwise\n      """\n      print(f"\ud83c\udfac Generating video with prompt: \'{prompt}\'")\n      \n      url = f"{self.base_url}/models/veo-3.0-generate-preview:predictLongRunning"\n      payload = {\n          "instances": [{\n              "prompt": prompt\n          }]\n      }\n      \n      try:\n          response = requests.post(url, headers=self.headers, json=payload)\n          response.raise_for_status()\n          \n          data = response.json()\n          operation_name = data.get("name")\n          \n          if operation_name:\n              print(f"\u2705 Video generation started: {operation_name}")\n              return operation_name\n          else:\n              print("\u274c No operation name returned")\n              print(f"Response: {json.dumps(data, indent=2)}")\n              return None\n              \n      except requests.RequestException as e:\n          print(f"\u274c Failed to start video generation: {e}")\n          if hasattr(e, \'response\') and e.response is not None:\n              try:\n                  error_data = e.response.json()\n                  print(f"Error details: {json.dumps(error_data, indent=2)}")\n              except:\n                  print(f"Error response: {e.response.text}")\n          return None\n  \n  def wait_for_completion(self, operation_name: str, max_wait_time: int = 600) -> Optional[str]:\n      """\n      Poll operation status until video generation is complete.\n      \n      Args:\n          operation_name: Name of the operation to monitor\n          max_wait_time: Maximum time to wait in seconds (default: 10 minutes)\n          \n      Returns:\n          Video URI if successful, None otherwise\n      """\n      print("\u23f3 Waiting for video generation to complete...")\n      \n      operation_url = f"{self.base_url}/{operation_name}"\n      start_time = time.time()\n      poll_interval = 10  # Start with 10 seconds\n      \n      while time.time() - start_time < max_wait_time:\n          try:\n              print(f"\ud83d\udd0d Polling status... ({int(time.time() - start_time)}s elapsed)")\n              \n              response = requests.get(operation_url, headers=self.headers)\n              response.raise_for_status()\n              \n              data = response.json()\n              \n              # Check for errors\n              if "error" in data:\n                  print("\u274c Error in video generation:")\n                  print(json.dumps(data["error"], indent=2))\n                  return None\n              \n              # Check if operation is complete\n              is_done = data.get("done", False)\n              \n              if is_done:\n                  print("\ud83c\udf89 Video generation complete!")\n                  \n                  try:\n                      # Extract video URI from nested response\n                      video_uri = data["response"]["generateVideoResponse"]["generatedSamples"][0]["video"]["uri"]\n                      print(f"\ud83d\udcf9 Video URI: {video_uri}")\n                      return video_uri\n                  except KeyError as e:\n                      print(f"\u274c Could not extract video URI: {e}")\n                      print("Full response:")\n                      print(json.dumps(data, indent=2))\n                      return None\n              \n              # Wait before next poll, with exponential backoff\n              time.sleep(poll_interval)\n              poll_interval = min(poll_interval * 1.2, 30)  # Cap at 30 seconds\n              \n          except requests.RequestException as e:\n              print(f"\u274c Error polling operation status: {e}")\n              time.sleep(poll_interval)\n      \n      print(f"\u23f0 Timeout after {max_wait_time} seconds")\n      return None\n  \n  def download_video(self, video_uri: str, output_filename: str = "generated_video.mp4") -> bool:\n      """\n      Download the generated video file.\n      \n      Args:\n          video_uri: URI of the video to download (from Google\'s response)\n          output_filename: Local filename to save the video\n          \n      Returns:\n          True if download successful, False otherwise\n      """\n      print(f"\u2b07\ufe0f  Downloading video...")\n      print(f"Original URI: {video_uri}")\n      \n      # Convert Google URI to LiteLLM proxy URI\n      # Example: https://generativelanguage.googleapis.com/v1beta/files/abc123 -> /gemini/download/v1beta/files/abc123:download?alt=media\n      if video_uri.startswith("https://generativelanguage.googleapis.com/"):\n          relative_path = video_uri.replace(\n              "https://generativelanguage.googleapis.com/",\n              ""\n          )\n      else:\n          relative_path = video_uri\n\n      # base_url: https://api.thucchien.ai/gemini/v1beta\n      if self.base_url.endswith("/v1beta"):\n          base_path = self.base_url.replace("/v1beta", "/download")\n      else:\n          base_path = self.base_url\n\n      litellm_download_url = f"{base_path}/{relative_path}"\n      print(f"Download URL: {litellm_download_url}")\n      \n      try:\n          # Download with streaming and redirect handling\n          response = requests.get(\n              litellm_download_url, \n              headers=self.headers, \n              stream=True,\n              allow_redirects=True  # Handle redirects automatically\n          )\n          response.raise_for_status()\n          \n          # Save video file\n          with open(output_filename, \'wb\') as f:\n              downloaded_size = 0\n              for chunk in response.iter_content(chunk_size=8192):\n                  if chunk:\n                      f.write(chunk)\n                      downloaded_size += len(chunk)\n                      \n                      # Progress indicator for large files\n                      if downloaded_size % (1024 * 1024) == 0:  # Every MB\n                          print(f"\ud83d\udce6 Downloaded {downloaded_size / (1024*1024):.1f} MB...")\n          \n          # Verify file was created and has content\n          if os.path.exists(output_filename):\n              file_size = os.path.getsize(output_filename)\n              if file_size > 0:\n                  print(f"\u2705 Video downloaded successfully!")\n                  print(f"\ud83d\udcc1 Saved as: {output_filename}")\n                  print(f"\ud83d\udccf File size: {file_size / (1024*1024):.2f} MB")\n                  return True\n              else:\n                  print("\u274c Downloaded file is empty")\n                  os.remove(output_filename)\n                  return False\n          else:\n              print("\u274c File was not created")\n              return False\n              \n      except requests.RequestException as e:\n          print(f"\u274c Download failed: {e}")\n          if hasattr(e, \'response\') and e.response is not None:\n              print(f"Status code: {e.response.status_code}")\n              print(f"Response headers: {dict(e.response.headers)}")\n          return False\n  \n  def generate_and_download(self, prompt: str, output_filename: str = None) -> bool:\n      """\n      Complete workflow: generate video and download it.\n      \n      Args:\n          prompt: Text description for video generation\n          output_filename: Output filename (auto-generated if None)\n          \n      Returns:\n          True if successful, False otherwise\n      """\n      # Auto-generate filename if not provided\n      if output_filename is None:\n          timestamp = int(time.time())\n          safe_prompt = "".join(c for c in prompt[:30] if c.isalnum() or c in (\' \', \'-\', \'_\')).rstrip()\n          output_filename = f"veo_video_{safe_prompt.replace(\' \', \'_\')}_{timestamp}.mp4"\n      \n      print("=" * 60)\n      print("\ud83c\udfac VEO VIDEO GENERATION WORKFLOW")\n      print("=" * 60)\n      \n      # Step 1: Generate video\n      operation_name = self.generate_video(prompt)\n      if not operation_name:\n          return False\n      \n      # Step 2: Wait for completion\n      video_uri = self.wait_for_completion(operation_name)\n      if not video_uri:\n          return False\n      \n      # Step 3: Download video\n      success = self.download_video(video_uri, output_filename)\n      \n      if success:\n          print("=" * 60)\n          print("\ud83c\udf89 SUCCESS! Video generation complete!")\n          print(f"\ud83d\udcc1 Video saved as: {output_filename}")\n          print("=" * 60)\n      else:\n          print("=" * 60)\n          print("\u274c FAILED! Video generation or download failed")\n          print("=" * 60)\n      \n      return success\n\n\ndef main():\n  """\n  Example usage of the VeoVideoGenerator.\n  \n  Configure these environment variables:\n  - LITELLM_BASE_URL: Your LiteLLM proxy URL (default: https://api.thucchien.ai/gemini/v1beta)\n  - LITELLM_API_KEY: Your LiteLLM API key (default: sk-1234)\n  """\n  \n  # Configuration from environment or defaults\n  base_url = os.getenv("LITELLM_BASE_URL", "https://api.thucchien.ai/gemini/v1beta")\n  api_key = os.getenv("LITELLM_API_KEY", "sk-1234")\n  \n  print("\ud83d\ude80 Starting Veo Video Generation Example")\n  print(f"\ud83d\udce1 Using LiteLLM proxy at: {base_url}")\n  \n  # Initialize generator\n  generator = VeoVideoGenerator(base_url=base_url, api_key=api_key)\n  \n  # Example prompts - try different ones!\n  example_prompts = [\n      "A cat playing with a ball of yarn in a sunny garden",\n      "Ocean waves crashing against rocky cliffs at sunset",\n      "A bustling city street with people walking and cars passing by",\n      "A peaceful forest with sunlight filtering through the trees"\n  ]\n  \n  # Use first example or get from user\n  prompt = example_prompts[0]\n  print(f"\ud83c\udfac Using prompt: \'{prompt}\'")\n  \n  # Generate and download video\n  success = generator.generate_and_download(prompt)\n  \n  if success:\n      print("\u2705 Example completed successfully!")\n      print("\ud83d\udca1 Try modifying the prompt in the script for different videos!")\n  else:\n      print("\u274c Example failed!")\n      print("\ud83d\udd27 Check your API Configuration")\n\nif __name__ == "__main__":\n  main()'})]})]}),"\n",(0,o.jsx)(n.h2,{id:"c\xe1c-tham-s\u1ed1-t\xf9y-ch\u1ecdn",children:"C\xe1c tham s\u1ed1 t\xf9y ch\u1ecdn"}),"\n",(0,o.jsxs)(n.p,{children:["Ngo\xe0i ",(0,o.jsx)(n.code,{children:"prompt"}),", b\u1ea1n c\xf3 th\u1ec3 ch\u1ec9 \u0111\u1ecbnh th\xeam c\xe1c tham s\u1ed1 kh\xe1c trong body c\u1ee7a y\xeau c\u1ea7u \u1edf ",(0,o.jsx)(n.strong,{children:"B\u01b0\u1edbc 1"})," \u0111\u1ec3 ki\u1ec3m so\xe1t video \u0111\u01b0\u1ee3c t\u1ea1o ra, v\xed d\u1ee5 nh\u01b0 th\u1eddi l\u01b0\u1ee3ng, ch\u1ea5t l\u01b0\u1ee3ng, v.v."]}),"\n",(0,o.jsxs)(n.p,{children:["\u0110\u1ec3 bi\u1ebft danh s\xe1ch \u0111\u1ea7y \u0111\u1ee7 c\xe1c tham s\u1ed1 v\xe0 c\xe1ch s\u1eed d\u1ee5ng, vui l\xf2ng tham kh\u1ea3o t\xe0i li\u1ec7u ch\xednh th\u1ee9c t\u1ea1i \u0111\xe2y: ",(0,o.jsx)(n.a,{href:"https://ai.google.dev/gemini-api/docs/video?example=dialogue#veo-model-parameters",children:"Google AI for Developers - Video Generation"}),"."]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}},1470:(e,n,t)=>{t.d(n,{A:()=>j});var i=t(6540),o=t(4164),r=t(3104),a=t(6347),s=t(205),l=t(7485),d=t(1682),c=t(679);function u(e){return i.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,i.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:t,default:i}})=>({value:e,label:n,attributes:t,default:i}))}(t);return function(e){const n=(0,d.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function h({value:e,tabValues:n}){return n.some(n=>n.value===e)}function g({queryString:e=!1,groupId:n}){const t=(0,a.W6)(),o=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(o),(0,i.useCallback)(e=>{if(!o)return;const n=new URLSearchParams(t.location.search);n.set(o,e),t.replace({...t.location,search:n.toString()})},[o,t])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:o}=e,r=p(e),[a,l]=(0,i.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:r})),[d,u]=g({queryString:t,groupId:o}),[m,f]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,o]=(0,c.Dv)(n);return[t,(0,i.useCallback)(e=>{n&&o.set(e)},[n,o])]}({groupId:o}),v=(()=>{const e=d??m;return h({value:e,tabValues:r})?e:null})();(0,s.A)(()=>{v&&l(v)},[v]);return{selectedValue:a,selectValue:(0,i.useCallback)(e=>{if(!h({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),f(e)},[u,f,r]),tabValues:r}}var f=t(2303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var _=t(4848);function b({className:e,block:n,selectedValue:t,selectValue:i,tabValues:a}){const s=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),d=e=>{const n=e.currentTarget,o=s.indexOf(n),r=a[o].value;r!==t&&(l(n),i(r))},c=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;n=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;n=s[t]??s[s.length-1];break}}n?.focus()};return(0,_.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},e),children:a.map(({value:e,label:n,attributes:i})=>(0,_.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{s.push(e)},onKeyDown:c,onClick:d,...i,className:(0,o.A)("tabs__item",v.tabItem,i?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function x({lazy:e,children:n,selectedValue:t}){const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=r.find(e=>e.props.value===t);return e?(0,i.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,_.jsx)("div",{className:"margin-top--md",children:r.map((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function y(e){const n=m(e);return(0,_.jsxs)("div",{className:(0,o.A)("tabs-container",v.tabList),children:[(0,_.jsx)(b,{...n,...e}),(0,_.jsx)(x,{...n,...e})]})}function j(e){const n=(0,f.A)();return(0,_.jsx)(y,{...e,children:u(e.children)},String(n))}},9365:(e,n,t)=>{t.d(n,{A:()=>a});t(6540);var i=t(4164);const o={tabItem:"tabItem_Ymn6"};var r=t(4848);function a({children:e,hidden:n,className:t}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.A)(o.tabItem,t),hidden:n,children:e})}}}]);